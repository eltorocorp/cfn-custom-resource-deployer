// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eltorocorp/cfn-custom-resource-deployer/src/customresources (interfaces: CustomResource)

// Package mock_customresources is a generated GoMock package.
package mock_customresources

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomResource is a mock of CustomResource interface
type MockCustomResource struct {
	ctrl     *gomock.Controller
	recorder *MockCustomResourceMockRecorder
}

// MockCustomResourceMockRecorder is the mock recorder for MockCustomResource
type MockCustomResourceMockRecorder struct {
	mock *MockCustomResource
}

// NewMockCustomResource creates a new mock instance
func NewMockCustomResource(ctrl *gomock.Controller) *MockCustomResource {
	mock := &MockCustomResource{ctrl: ctrl}
	mock.recorder = &MockCustomResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomResource) EXPECT() *MockCustomResourceMockRecorder {
	return m.recorder
}

// ActionWasSuccessful mocks base method
func (m *MockCustomResource) ActionWasSuccessful() *bool {
	ret := m.ctrl.Call(m, "ActionWasSuccessful")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// ActionWasSuccessful indicates an expected call of ActionWasSuccessful
func (mr *MockCustomResourceMockRecorder) ActionWasSuccessful() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionWasSuccessful", reflect.TypeOf((*MockCustomResource)(nil).ActionWasSuccessful))
}

// Create mocks base method
func (m *MockCustomResource) Create() {
	m.ctrl.Call(m, "Create")
}

// Create indicates an expected call of Create
func (mr *MockCustomResourceMockRecorder) Create() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomResource)(nil).Create))
}

// Data mocks base method
func (m *MockCustomResource) Data() *interface{} {
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(*interface{})
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockCustomResourceMockRecorder) Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockCustomResource)(nil).Data))
}

// Delete mocks base method
func (m *MockCustomResource) Delete() {
	m.ctrl.Call(m, "Delete")
}

// Delete indicates an expected call of Delete
func (mr *MockCustomResourceMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomResource)(nil).Delete))
}

// NoEcho mocks base method
func (m *MockCustomResource) NoEcho() *bool {
	ret := m.ctrl.Call(m, "NoEcho")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// NoEcho indicates an expected call of NoEcho
func (mr *MockCustomResourceMockRecorder) NoEcho() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoEcho", reflect.TypeOf((*MockCustomResource)(nil).NoEcho))
}

// Reason mocks base method
func (m *MockCustomResource) Reason() *string {
	ret := m.ctrl.Call(m, "Reason")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Reason indicates an expected call of Reason
func (mr *MockCustomResourceMockRecorder) Reason() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reason", reflect.TypeOf((*MockCustomResource)(nil).Reason))
}

// ResourceName mocks base method
func (m *MockCustomResource) ResourceName() *string {
	ret := m.ctrl.Call(m, "ResourceName")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ResourceName indicates an expected call of ResourceName
func (mr *MockCustomResourceMockRecorder) ResourceName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceName", reflect.TypeOf((*MockCustomResource)(nil).ResourceName))
}

// Update mocks base method
func (m *MockCustomResource) Update() {
	m.ctrl.Call(m, "Update")
}

// Update indicates an expected call of Update
func (mr *MockCustomResourceMockRecorder) Update() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomResource)(nil).Update))
}
